testing np.roll(array,2) to see how array is changed

original array [[ 1  1  1  1]
                [ 8  4  2  1]
                [27  9  3  1]
                [64 16  4  1]]

np.roll(array,2) 
[[ 4  1  1  1]
 [ 1  1  8  4]
 [ 2  1 27  9]
 [ 3  1 64 16]]

original - roll array 
[[ -3   0   0   0]
 [  7   3  -6  -3]
 [ 25   8 -24  -8]
 [ 61  15 -60 -15]]

testing np.roll(array,2) for large DTM raster
took two hours

testing NaN insertion for non data values and printing by column
Projection:  PROJCS["EQUIRECTANGULAR MARS",GEOGCS["GCS_MARS",DATUM["D_MARS",SPHEROID["MARS_localRadius",3387887.658234,0]],PRIMEM["Reference_Meridian",0],UNIT["degree",0.0174532925199433,AUTHORITY["EPSG","9122"]]],PROJECTION["Equirectangular"],PARAMETER["standard_parallel_1",40],PARAMETER["central_meridian",16.46],PARAMETER["false_easting",0],PARAMETER["false_northing",0],UNIT["metre",1,AUTHORITY["EPSG","9001"]],AXIS["Easting",EAST],AXIS["Northing",NORTH]]
Columns: 6475
Rows: 12101
Band count: 1
GeoTransform (-3435.0476024812137, 1.0017636635991, 0.0, 2410262.408129043, 0.0, -1.0017636635991)
[nan nan nan ... nan nan nan]
[nan nan nan ... nan nan nan]
1
[nan nan nan ... nan nan nan]
6475

A = [[11,12,5,2], 
[15,6,10,4], 
[10,8,12,5], 
[12,15,8,6]]
row = 4
column = 4
#A[row][col]
for row in range(row-1):
    result = np.array(A[row+1])-(np.array(A[row]))
    print(result)

result: 
[ 4 -6  5  2]
[-5  2  2  1]
[ 2  7 -4  1]

count=0
for row in range(rows-1):
    subtract = np.array(data_nan[row+1])-(np.array(data_nan[row]))
    newarr = np.append(data_nan,subtract)
    count+=1
    #rint(count)
print("The shape of a numpy array is: ",newarr.shape)
took 3 minutes to run on 5707 row array

zeroarray =  [[0]*rows]*columns
count=0
for row in range(rows-1):
    subtract = np.array(data_nan[row+1])-(np.array(data_nan[row]))
    newarray = np.append(zeroarray,subtract)
    count+=1
print("The shape of a numpy array is: ",newarray.shape)
plt.figure(figsize=(58,60))
plt.imshow(newarray)
plt.colorbar()
plt.clim(-10,70)

TypeError: Invalid shape (33979724,) for image data

#A = [[11,12,5,2],[15,6,10,4],[10,8,12,5],[12,15,8,6]]
subtractiny = np.roll(A,-1*scale,axis=0) - np.roll(A, scale,axis=0)#shift array up one minus shift array down one
    subtractinx = np.roll(A,-1*scale,axis=1) - np.roll(A, scale,axis=1)#shift array right one minus shift array left one
    yxinc = 2*pixelsize
    dzdy = subtractiny/yxinc 
    dzdx = subtractinx/yxinc
    theta = np.arctan(dzdx**2 + dzdy**2)

#doing complex slope calculation on array
A = [[11,12,5,2],[15,6,10,4],[10,8,12,5],[12,15,8,6]]
#shift array up one, plus orginal array times two, plus original array minus 
#shift array down one plus orginal array times two plus original array
multby24x4 = np.full((4,4),2)
multnow = np.multiply(A,multby24x4)
rollupwhy = np.roll(A,-1*scale,axis=0)
addinA = np.add(rollupwhy,multnow)
nextaddinA = np.add(addinA,A)
rolldownwhy = np.roll(A,scale,axis=0)
addinA2 = np.add(rolldownwhy,multnow)
thenaddinA = np.add(addinA2,A)
subtractinA = np.subtract(nextaddinA,thenaddinA)
print(subtractinA)
#shift array right one plus original array times two, plus original array minus shift array left one plus original array times two plus original array
rollrightA = np.roll(A,-1*scale,axis=1)
rollleftA = np.roll(A, scale,axis=1)
addinAx = np.add(rollrightA,multnow)
nextaddinAx = np.add(addinAx,A)
addinA2x = np.add(rollleftA,multnow)
thenaddinAx = np.add(addinA2x,A)
subtractinXA = np.subtract(nextaddinAx,thenaddinAx)
print(subtractinXA)
[[ 3 -9  2 -2]
 [-1 -4  7  3]
 [-3  9 -2  2]
 [ 1  4 -7 -3]]
[[ 10  -6 -10   6]
 [  2  -5  -2   5]
 [  3   2  -3  -2]
 [  9  -4  -9   4]]
=================================
A = [[11,12,5,2], 
     [15,6,10,4], 
     [10,8,12,5], 
     [12,15,8,6]]

a = np.roll(np.roll(A,scale,axis=0),scale,axis=1)#shift array down one, right one
print(a)
b = np.roll(A,scale,axis=0)#shift array down one
print(b)
c = np.roll(np.roll(A,scale,axis=0),-1*scale,axis=1)#shift array down one, left one
print(c)
d = np.roll(A,scale,axis=1)#shift array right one
print(d)
f = np.roll(A,-1*scale,axis=1) #shift array left one
print(f)
g = np.roll(np.roll(A,-1*scale,axis=0),scale,axis=1)#shift array up one, right one
print(g)
h = np.roll(A,-1*scale,axis=0)#shift array up one
print(h)
i = np.roll(np.roll(A,-1*scale,axis=0),-1*scale,axis=1)#shift array up one, left one
print(i)
[[ 6 12 15  8]
 [ 2 11 12  5]
 [ 4 15  6 10]
 [ 5 10  8 12]]
[[12 15  8  6]
 [11 12  5  2]
 [15  6 10  4]
 [10  8 12  5]]
[[15  8  6 12]
 [12  5  2 11]
 [ 6 10  4 15]
 [ 8 12  5 10]]
[[ 2 11 12  5]
 [ 4 15  6 10]
 [ 5 10  8 12]
 [ 6 12 15  8]]
[[12  5  2 11]
 [ 6 10  4 15]
 [ 8 12  5 10]
 [15  8  6 12]]
[[ 4 15  6 10]
 [ 5 10  8 12]
 [ 6 12 15  8]
 [ 2 11 12  5]]
[[15  6 10  4]
 [10  8 12  5]
 [12 15  8  6]
 [11 12  5  2]]
[[ 6 10  4 15]
 [ 8 12  5 10]
 [15  8  6 12]
 [12  5  2 11]]
dzdx = (c + 2*f + i) - (a + 2*d + g)
dzdy = (a + 2*b + c) - (g + 2*h + i)

xinc = 8*pixelsize
diffx = dzdx/xinc
diffy = dzdy/xinc
dxsquared = diffx**2
dysquared = diffy**2
yplusx = dxsquared+dysquared
sqyplusx = np.sqrt(yplusx)
theta = np.arctan(sqyplusx)
slopedeg = theta * 180/np.pi
plt.figure(figsize=(4,4)) #columns=5953 row=5707, figsize=(58,60)
plt.imshow(slopedeg, cmap='magma', vmin=np.nanmin(slopedeg),vmax=np.nanmax(slopedeg))
